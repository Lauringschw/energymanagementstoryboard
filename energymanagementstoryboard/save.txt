
i dont want any button to predict it. i want it to use ai_thermo_settings and user_input_log and settings_log data to help predict for future.

i want the machine model to display the prediction in the large chart.

import SwiftUI
import Charts
import CoreML

struct AiThermoView: View {
    @State private var currentTemperature: Int = 20
    @State private var mode: String = "Auto"
    @State private var workingStatus: String = "Heating..."
    @State private var selectedFeeling: String = "A Little Hot"
    
    // Core ML Model
    let thermostatModel = ThermostatModel()
    
    @State private var predictedTemperature: Double = 20.0
    
    // State for dragging the circle in Manual mode
    @State private var manualTemperature: CGFloat = 10.0
    @State private var isManualMode: Bool = false
    @State private var circleOffset: CGSize = CGSize.zero
    @State private var circleAngle: CGFloat = -90
    
    // Prediction Input Example Variables
    @State private var locationStatus: Int = 0
    @State private var preferredTemperature: Double = 22.0
    @State private var userFeedback: Int = 2 // Example (0 to 4)
    @State private var energySavingMode: Int = 0 // Example (0 or 1)
    @State private var manualOverride: Int = 0 // Example (0 or 1)
    @State private var tempAdjustment: Double = 0.5
    @State private var outsideTemperature: Double = 10.0
    
    // Sample data for the large temperature graph
    let temperatureData: [TemperatureData] = [
        TemperatureData(time: "6 AM", temperature: 15.0),
        TemperatureData(time: "9 AM", temperature: 20.0),
        TemperatureData(time: "12 PM", temperature: 22.5),
        TemperatureData(time: "3 PM", temperature: 24.0),
        TemperatureData(time: "6 PM", temperature: 23.0),
        TemperatureData(time: "9 PM", temperature: 21.5),
        TemperatureData(time: "12 AM", temperature: 18.0),
        TemperatureData(time: "3 AM", temperature: 15.5),
    ]
    
    // Updated temperature prediction data (small chart) with split time for spanning across days
    let temperaturePredictionData: [TemperaturePredictionData] = [
        TemperaturePredictionData(timeStart: 0, timeEnd: 6, temperature: 16.0),   // cooling from 12am to 6am
        TemperaturePredictionData(timeStart: 6, timeEnd: 9, temperature: 22.0),   // heating from 6am to 9am
        TemperaturePredictionData(timeStart: 9, timeEnd: 16, temperature: 16.0),  // cooling from 9am to 5pm
        TemperaturePredictionData(timeStart: 16, timeEnd: 21, temperature: 22.0),  // heating from 5pm to 9pm
        TemperaturePredictionData(timeStart: 21, timeEnd: 24, temperature: 16.0)  // heating from 5pm to 9pm
    ]
    
    // Sample temperature data structure
    struct TemperatureData: Identifiable {
        var id = UUID()
        var time: String
        var temperature: Double
    }
    
    // Sample temperature prediction data structure
    struct TemperaturePredictionData: Identifiable {
        var id = UUID()
        var timeStart: Double
        var timeEnd: Double
        var temperature: Double
    }
    
    var body: some View {
        NavigationView {
            ZStack {
                VStack {
                    // Title and navigation back button
                    HStack {
                        Image(systemName: "chevron.left")
                            .font(.system(size: 24))
                            .padding(.leading, 20)
                        Text("KITCHEN")
                            .font(.headline)
                            .padding(.leading, 10)
                        Spacer()
                    }
                    .padding(.top, 0) // Reduced top padding
                    
                    Spacer().frame(height: 30)
                    
                    // Current temperature label
                    HStack {
                        Text("Current Temperature")
                            .font(.headline)
                            .foregroundColor(.green)
                            .padding(.leading, 20)
                        Spacer()
                    }
                    
                    Spacer().frame(height: 0)
                    
                    // Feedback button and circular temperature indicator
                    HStack(alignment: .center) {
                        Menu {
                            Button("Too Warm") {
                                updateFeelingSelection(feeling: "Too Warm")
                            }
                            Button("A Little Warm") {
                                updateFeelingSelection(feeling: "A Little Warm")
                            }
                            Button("Perfect") {
                                updateFeelingSelection(feeling: "Perfect")
                            }
                            Button("A Little Cold") {
                                updateFeelingSelection(feeling: "A Little Cold")
                            }
                            Button("Too Cold") {
                                updateFeelingSelection(feeling: "Too Cold")
                            }
                        } label: {
                            Text(selectedFeeling)
                                .frame(width: 100, height: 100)
                                .background(getFeelingBackgroundColor())
                                .foregroundColor(.white)
                                .cornerRadius(12)
                                .font(.system(size: 16))
                        }
                        .padding(.leading, 20)
                        
                        Spacer()
                        
                        ZStack {
                            Circle()
                                .trim(from: 0, to: 0.75)
                                .stroke(Color.green, lineWidth: 30)
                                .frame(width: 180, height: 180)
                                .rotationEffect(.degrees(-90))
                            
                            Text("\(currentTemperature)Â°")
                                .font(.system(size: 64))
                                .fontWeight(.bold)
                                .foregroundColor(.green)
                            
                            if isManualMode {
                                GeometryReader { geometry in
                                    Circle()
                                        .frame(width: 40, height: 40)
                                        .foregroundColor(.blue)
                                        .overlay(Text(String(format: "%.1f", manualTemperature)).foregroundColor(.white))
                                        .position(positionForCircle(in: geometry.size))
                                        .gesture(
                                            DragGesture()
                                                .onChanged { value in
                                                    let center = CGPoint(x: geometry.size.width / 2, y: geometry.size.height / 2)
                                                    var angle = atan2(value.location.y - center.y, value.location.x - center.x)
                                                    
                                                    let angleInDegrees = angle * 180 / .pi
                                                    
                                                    if angleInDegrees < -90 && angleInDegrees > -180 {
                                                        print("Angle restricted, outside of allowable range.")
                                                    } else {
                                                        updateManualTemperature(angle: angle)
                                                    }
                                                }
                                        )
                                }
                                .frame(width: 180, height: 180)
                            }
                        }
                        .padding(.trailing, 20)
                    }
                    
                    Spacer().frame(height: 40)
                    
                    // First (Large) graph for temperature readings (line chart)
                    Chart(temperatureData) { data in
                        // Add the AreaMark to shade the area under the line, extending to 0 degrees
                        AreaMark(
                            x: .value("Time", data.time), // X-axis: time of day
                            yStart: .value("Temperature", data.temperature), // Y-axis: temperature of the point
                            yEnd: .value("Baseline", 0) // Extend the gray area to 0 degrees
                        )
                        .foregroundStyle(Gradient(colors: [Color.gray.opacity(0.3), Color.clear])) // Gray shading under the line
                        
                        // Add the LineMark for the temperature line
                        LineMark(
                            x: .value("Time", data.time), // X-axis: time of day
                            y: .value("Temperature", data.temperature) // Y-axis: temperature
                        )
                        .lineStyle(StrokeStyle(lineWidth: 2)) // Set line width and style
                        .foregroundStyle(Color.blue) // Set the line color
                        
                        // Add points on the line
                        PointMark(
                            x: .value("Time", data.time),
                            y: .value("Temperature", data.temperature)
                        )
                        .foregroundStyle(Color.blue) // Color the points
                        
                        // Add labels and vertical lines only for every second data point
                        if let index = temperatureData.firstIndex(where: { $0.id == data.id }), index % 2 == 0 {
                            RuleMark(
                                x: .value("Time", data.time),
                                yStart: .value("Temperature", data.temperature), // Starting from the data point
                                yEnd: .value("Temperature", data.temperature + 5) // Vertical line extending slightly above the point
                            )
                            .lineStyle(StrokeStyle(lineWidth: 1, dash: [5])) // Dotted vertical line
                            .foregroundStyle(Color.gray)
                            .annotation(position: .top, alignment: .leading) {
                                Text("\(String(format: "%.1f", data.temperature)) Â°C") // Display temperature with one decimal
                                    .font(.caption)
                                    .foregroundColor(data.temperature > 22 ? .orange : .blue) // Dynamic color for annotation
                            }
                        }
                    }
                    .frame(height: 150)
                    .padding(.horizontal, 20)
                    
                    Spacer().frame(height: 40)
                    
                    // Schedule logo and text above the new small chart
                    HStack(spacing: 5) {
                        Image(systemName: "calendar.badge.clock")
                            .font(.system(size: 24))
                        Text("Schedule")
                            .font(.system(size: 16))
                        Spacer()
                        NavigationLink(destination: SettingsView()) {
                            Image(systemName: "gearshape.fill")
                                .font(.system(size: 24))
                                .foregroundColor(.gray)
                        }
                    }
                    .padding(.bottom, 10)
                    
                    // Small horizontal bar chart (Heating and Cooling) based on prediction data
                    VStack {
                        ZStack {
                            HStack(spacing: 0) {
                                ForEach(temperaturePredictionData) { prediction in
                                    Rectangle()
                                        .fill(prediction.temperature == 16 ? Color.blue : Color.orange)
                                        .frame(width: CGFloat(prediction.timeEnd - prediction.timeStart) * 15) // Adjust width for larger chart
                                }
                            }
                            .frame(height: 30)
                        }
                        
                        // Time labels below the small chart
                        HStack {
                            Image(systemName: "moon.fill")
                                .foregroundColor(.gray)
                            Spacer()
                            Text("6")
                            Spacer()
                            Image(systemName: "sun.max.fill")
                                .foregroundColor(.gray)
                            Spacer()
                            Text("18")
                            Spacer()
                            Image(systemName: "moon.fill")
                                .foregroundColor(.gray)
                        }
                        .font(.system(size: 12))
                        .padding(.horizontal, 10)
                    }
                    
                    Spacer().frame(height: 40)
                    
                    // Mode and Working Status at the very bottom
                    HStack {
                        VStack {
                            Text("Mode")
                                .foregroundColor(.gray)
                            Menu {
                                Button("Auto") {
                                    mode = "Auto"
                                    isManualMode = false
                                }
                                Button("Manual") {
                                    mode = "Manual"
                                    isManualMode = true
                                }
                                Button("Off") {
                                    mode = "Off"
                                    isManualMode = false
                                }
                            } label: {
                                Text(mode)
                                    .frame(width: 150, height: 30)
                                    .background(Color.gray.opacity(0.2))
                                    .foregroundColor(.black)
                                    .cornerRadius(5)
                                    .padding(.top, 5)
                            }
                        }
                        
                        Spacer()
                        
                        VStack {
                            Text("Working Status")
                                .foregroundColor(.gray)
                            HStack {
                                if workingStatus.contains("Heating") {
                                    Image(systemName: "flame.fill")
                                        .foregroundColor(.orange)
                                } else if workingStatus.contains("Cooling") {
                                    Image(systemName: "snowflake")
                                        .foregroundColor(.blue)
                                }
                                Text(workingStatus)
                                    .font(.headline)
                            }
                        }
                        .onAppear{
                            loadAiThermoSettings()
                        }
                    }
                    .padding(.horizontal, 40)
                    .onDisappear(){
                        saveAiThermoSettings()
                    }
                }
                .padding(.horizontal, 20)
                
                // Dark curtain overlay when mode is "Off"
                if mode == "Off" {
                    Color.black.opacity(0.6)
                        .edgesIgnoringSafeArea(.all)
                }
            }
        }
    }
    
    
    
    private func loadAiThermoSettings() {
        if let settings = FileUtility.shared.readSettings(fileName: "ai_thermo_settings.txt") {
            if let savedMode = settings["Mode"] {
                mode = savedMode
            }
            if let savedManualTemp = settings["Manual Temperature"],
               let manualTemp = Double(savedManualTemp) {
                manualTemperature = CGFloat(manualTemp)
            }
            if let savedFeeling = settings["Selected Feeling"] {
                selectedFeeling = savedFeeling
            }
        }
    }
    
    private func saveAiThermoSettings() {
        let settings = """
        Mode: \(mode)
        Manual Temperature: \(manualTemperature)
        Selected Feeling: \(selectedFeeling)
        Changed At: \(Date())
        """
        FileUtility.shared.writeToFile(fileName: "ai_thermo_settings.txt", content: settings + "\n")
    }
    
    // Update the feeling selection and button appearance based on the selection
    private func updateFeelingSelection(feeling: String) {
        selectedFeeling = feeling
        
        let logEntry = """
        Feeling: \(feeling)
        Current Temperature: \(currentTemperature)
        Time: \(Date())
        Outside Temperature: \(getOutsideTemperature())
        """
        FileUtility.shared.writeToFile(fileName: "user_input_log.txt", content: logEntry + "\n")
        
        switch feeling {
        case "Too Warm":
            print("Selected feeling: Too Warm")
        case "A Little Warm":
            print("Selected feeling: A Little Warm")
        case "Perfect":
            print("Selected feeling: Perfect")
        case "A Little Cold":
            print("Selected feeling: A Little Cold")
        case "Too Cold":
            print("Selected feeling: Too Cold")
        default:
            print("Selected feeling: Default")
        }
    }
    
    // Set the background color of the feedback button based on the selection
    private func getFeelingBackgroundColor() -> Color {
        switch selectedFeeling {
        case "Too Warm":
            return Color.red
        case "A Little Warm":
            return Color.orange.opacity(0.8)
        case "Perfect":
            return Color.green
        case "A Little Cold":
            return Color.blue.opacity(0.5)
        case "Too Cold":
            return Color.blue
        default:
            return Color.orange
        }
    }
    
    // Calculate the position of the draggable circle along the ring
    private func positionForCircle(in size: CGSize) -> CGPoint {
        let radius = size.width / 2
        let angle = Angle.degrees(Double(circleAngle))
        let x = radius + radius * CGFloat(cos(angle.radians))
        let y = radius + radius * CGFloat(sin(angle.radians))
        return CGPoint(x: x, y: y)
    }
    
    // Update the manual temperature based on the dragging angle
    private func updateManualTemperature(angle: CGFloat) {
        // Calculate degrees from the angle and map it between 10 and 40
        let normalizedAngle = (angle + .pi / 2) / (.pi * 2)
        var temp = normalizedAngle * 35 + 10 // Map to 10-40 range
        
        // Round to the nearest 0.5
        temp = round(temp * 2) / 2
        
        // Update the manual temperature
        manualTemperature = max(10, min(45, temp))
        
        // Update the draggable circle's angle
        circleAngle = angle * 180 / .pi
        
        // Update the working status based on temperature comparison
        if manualTemperature > CGFloat(currentTemperature) {
            workingStatus = "Heating..."
        } else if manualTemperature < CGFloat(currentTemperature) {
            workingStatus = "Cooling..."
        } else {
            workingStatus = "Steady..."
        }
    }
    
    // Mock function to get outside temperature
    private func getOutsideTemperature() -> Double {
        // Replace with actual implementation to get outside temperature
        return 15.0
    }
    
    
}

struct SettingsView: View {
    @State private var locationControlEnabled: Bool = true
    @State private var energySavingModeEnabled: Bool = false
    @State private var leavingTemperature: Double = 15.0
    @State private var arrivingTemperature: Double = 21.5
    
    var body: some View {
        VStack(spacing: 20) {
            // Header with back button and title
            HStack {
                Image(systemName: "chevron.left")
                    .font(.system(size: 24))
                    .foregroundColor(.gray)
                Spacer()
                Image(systemName: "house.fill")
                    .resizable()
                    .frame(width: 50, height: 50)
                Spacer()
                Image(systemName: "figure.walk")
                    .font(.system(size: 24))
                    .foregroundColor(.gray)
            }
            .padding()
            
            ScrollView {
                VStack(spacing: 20) {
                    // Location Control Section
                    HStack {
                        Image(systemName: "location.fill")
                            .font(.system(size: 24))
                        Text("Location Control")
                            .font(.headline)
                        Spacer()
                        Toggle("", isOn: $locationControlEnabled)
                            .labelsHidden()
                            .onChange(of: locationControlEnabled) { newValue in
                                saveSettings()
                            }
                    }
                    .padding(.horizontal)
                    
                    Text("AI monitors your location, lowering the temperature when you leave and raising it when you return. It adapts to your routine, ensuring comfort and energy efficiency automatically.")
                        .font(.footnote)
                        .foregroundColor(.gray)
                        .padding(.horizontal)
                    
                    // Leaving Temperature
                    VStack(alignment: .leading) {
                        Text("WHEN LEAVING")
                            .font(.caption)
                            .fontWeight(.bold)
                        HStack {
                            Image(systemName: "thermometer")
                            Text("Temperature")
                            Spacer()
                            Text("\(leavingTemperature, specifier: "%.1f")Â°")
                            Slider(value: $leavingTemperature, in: 10...30, step: 0.1)
                                .frame(width: 150)
                                .onChange(of: leavingTemperature) { newValue in
                                    saveSettings()
                                }
                        }
                    }
                    .padding(.horizontal)
                    
                    // Arriving Temperature
                    VStack(alignment: .leading) {
                        Text("WHEN ARRIVING")
                            .font(.caption)
                            .fontWeight(.bold)
                        HStack {
                            Image(systemName: "thermometer")
                            Text("Temperature")
                            Spacer()
                            Text("\(arrivingTemperature, specifier: "%.1f")Â°")
                            Slider(value: $arrivingTemperature, in: 10...30, step: 0.1)
                                .frame(width: 150)
                                .onChange(of: arrivingTemperature) { newValue in
                                    saveSettings()
                                }
                        }
                    }
                    .padding(.horizontal)
                    
                    Text("Set your preferred temperatures for when you leave and return. The system adjusts automatically, maintaining comfort while optimizing energy use.")
                        .font(.footnote)
                        .foregroundColor(.gray)
                        .padding(.horizontal)
                    
                    // Energy-Saving Mode Section
                    HStack {
                        Image(systemName: "lightbulb.fill")
                            .font(.system(size: 24))
                        Text("Energy-Saving Mode")
                            .font(.headline)
                        Spacer()
                        Toggle("", isOn: $energySavingModeEnabled)
                            .labelsHidden()
                            .onChange(of: energySavingModeEnabled) { newValue in
                                saveSettings()
                            }
                    }
                    .padding(.horizontal)
                    
                    Text("Enable energy-saving mode to let AI reduce energy consumption during peak hours or when you're away. The system balances comfort with efficiency, helping you save on energy bills.")
                        .font(.footnote)
                        .foregroundColor(.gray)
                        .padding(.horizontal)
                }
                .padding(.top)
                .onAppear{
                    loadSettings()
                    
                }
            }
            .onDisappear{
                saveSettings()
            }
        }
        .navigationBarTitle("Settings", displayMode: .inline)
    }
    
    private func loadSettings() {
        if let settings = FileUtility.shared.readSettings(fileName: "settings_log.txt") {
            if let locationControl = settings["Location Control Enabled"] as? String {
                locationControlEnabled = locationControl == "true"
            }
            if let energySaving = settings["Energy Saving Mode Enabled"] as? String {
                energySavingModeEnabled = energySaving == "true"
            }
            if let leavingTemp = settings["Leaving Temperature"] as? String,
               let temp = Double(leavingTemp) {
                leavingTemperature = temp
            }
            if let arrivingTemp = settings["Arriving Temperature"] as? String,
               let temp = Double(arrivingTemp) {
                arrivingTemperature = temp
            }
        }
    }
    
    
    private func saveSettings() {
        let settings = """
        Location Control Enabled: \(locationControlEnabled)
        Energy Saving Mode Enabled: \(energySavingModeEnabled)
        Leaving Temperature: \(leavingTemperature)
        Arriving Temperature: \(arrivingTemperature)
        Changed At: \(Date())
        """
        FileUtility.shared.writeToFile(fileName: "settings_log.txt", content: settings + "\n")
    }
}

// Preview
struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        SettingsView()
    }
}

// UIKit ViewController to host SwiftUI content
class ViewControllerAI: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Add SwiftUI view to the current UIKit view controller
        let aiThermoView = UIHostingController(rootView: AiThermoView())
        addChild(aiThermoView)
        aiThermoView.view.frame = view.bounds
        view.addSubview(aiThermoView.view)
        aiThermoView.didMove(toParent: self)
    }
}
